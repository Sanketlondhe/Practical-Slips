/*ASSIGNMENT 1 SET A 
2. Creating a child process using the command exec(). Note down process ids of the parent and the child processes, check whether the control is given back to the parent after the child process terminates. Write a similar program using execv() and execvp() and observe the differences in behaviours of the commands.*/

/*Let us see a small example to show how to use execvp() function in C. We will have two .C files , EXEC.c and execDemo.c and we will replace the execDemo.c with EXEC.c by calling execvp() function in execDemo.c .
*/
//EXEC.c

#include<stdio.h>
#include<unistd.h>

int main()
{
	int i;
	
	printf("I am EXEC.c called by execvp() ");
	printf("\n");
	
	return 0;
}
//Now,create an executable file of EXEC.c using command

// gcc EXEC.c -o EXEC

//execDemo.c

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
		//A null terminated array of character pointers
		char *args[]={"./EXEC",NULL};
		execvp(args[0],args);
/*All statements are ignored after execvp() call as this whole process(execDemo.c) is replaced by another process (EXEC.c		*/
		
printf("Ending-----");
	
	return 0;
}